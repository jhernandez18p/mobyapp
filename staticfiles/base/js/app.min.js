// Gradient
var colors = new Array([38,160,218],[149, 149, 149],[49,71,85],[173, 169, 150],);
var step = 0;
var colorIndices = [0,1,0,1];
var gradientSpeed = 0.0037512;
function updateGradient()
{
    if ( $===undefined ) return;
    var c0_0 = colors[colorIndices[0]];
    var c0_1 = colors[colorIndices[1]];
    var c1_0 = colors[colorIndices[2]];
    var c1_1 = colors[colorIndices[3]];
    var istep = 1 - step;
    var r1 = Math.round(istep * c0_0[0] + step * c0_1[0]);
    var g1 = Math.round(istep * c0_0[1] + step * c0_1[1]);
    var b1 = Math.round(istep * c0_0[2] + step * c0_1[2]);
    var color1 = "rgb("+r1+","+g1+","+b1+")";
    var r2 = Math.round(istep * c1_0[0] + step * c1_1[0]);
    var g2 = Math.round(istep * c1_0[1] + step * c1_1[1]);
    var b2 = Math.round(istep * c1_0[2] + step * c1_1[2]);
    var color2 = "rgb("+r2+","+g2+","+b2+")";
    $('.gradient').css({
        background: "-webkit-gradient(linear, left top, right top, from("+color1+"), to("+color2+"))"}).css({
        background: "-moz-linear-gradient(left, "+color1+" 0%, "+color2+" 80%)"});
    step += gradientSpeed;
    if ( step >= 1 )
    {
        step %= 1;
        colorIndices[0] = colorIndices[1];
        colorIndices[2] = colorIndices[3];
        //pick two new target color indices
        //do not pick the same as the current one
        colorIndices[1] = ( colorIndices[1] + Math.floor( 1 + Math.random() * (colors.length - 1))) % colors.length;
        colorIndices[3] = ( colorIndices[3] + Math.floor( 1 + Math.random() * (colors.length - 1))) % colors.length;
    }
}
setInterval(updateGradient,10);

// Carousel
function moveToSelected(element) {
    if (element == "next") {
        var selected = $(".selected").next();
    } else if (element == "prev") {
        var selected = $(".selected").prev();
    } else {
        var selected = element;
    }

    var next = $(selected).next();
    var prev = $(selected).prev();
    var prevSecond = $(prev).prev();
    var nextSecond = $(next).next();

    $(selected)
        .removeClass()
        .addClass("selected");

    $(prev)
        .removeClass()
        .addClass("prev");
    $(next)
        .removeClass()
        .addClass("next");

    $(nextSecond)
        .removeClass()
        .addClass("nextRightSecond");

    $(prevSecond)
        .removeClass()
        .addClass("prevLeftSecond");

    $(nextSecond)
        .nextAll()
        .removeClass()
        .addClass("hideRight");

    $(prevSecond)
        .prevAll()
        .removeClass()
        .addClass("hideLeft");
}

// Eventos teclado
$(document).keydown(function(e) {
    switch (e.which) {
        case 37: // left
        moveToSelected("prev");
        break;

        case 39: // right
        moveToSelected("next");
        break;

        default:
        return;
    }
    e.preventDefault();
});

$("#myCarousel div").click(function() {
    moveToSelected($(this));
});     

$("#prev").click(function() {
    moveToSelected("prev");
});

$("#next").click(function() {
    moveToSelected("next");
});

$('.carousel').carousel({interval: 5000});

// using jQuery
function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}


function setCookie(cname,cvalue,exdays) {
    var date = new Date();
    date.setTime(date.getTime() + (exdays*24*60*60*1000));
    var expires = "expires=" + date.toGMTString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

$(document).ready(function checkCookie() {
    $('#cookieModalOK').click(function(){
        
        setCookie('cookie_modal',true,100);
        $('#modalCookie').modal('toggle');

        var csrftoken = getCookie('csrftoken');

        function csrfSafeMethod(method) {
            // these HTTP methods do not require CSRF protection
            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
        }
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", csrftoken);
                }
            }
        });

        $.ajax({
            type: 'POST',
            url: "/session",
            data: {
                'cookie_modal':true,
            },
            dataType: 'json',
            success: function (data) {
                alert(data);
            }
        });
        // alert(getCookie("cookie_modal"));
    });

    var cookieModal=getCookie("cookie_modal");
    if (cookieModal = true) {
        console.log('Moby Supply');
        $('#modalCookie').modal('toggle');
    } else {
        $('#modalCookie').modal('show');
    }
});








